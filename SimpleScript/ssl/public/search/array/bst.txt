//  Author: Corey Ferguson
//  Date:   August 8, 2023
//  File:   bst.txt

include("@/exception/rangeExcept")

func main()
    if nrows(argv) !== 4
        expectExcept("4 argument(s), got {}" format nrows(argv))
    end if

    array arr = ((argv row 0) slice 1, (argv cell 0, 0))

    beg = ((argv row 1) slice 1, (argv cell 1, 0))
    
    if subtypeOf beg !== "integer"
        typeExcept(subtypeOf beg, "integer")
    end if
    
    if beg < 0 || beg > count arr
        rangeExcept("beg {}, count {}" format array(beg, count arr))
    end if
    
    end = ((argv row 2) slice 1, (argv cell 2, 0))
    
    if subtypeOf end !== "integer"
        typeExcept(subtypeOf end, "integer")
    end if
    
    if end < beg || end > count arr
        rangeExcept("beg {}, end {}, count {}" format array(beg, end, count arr))
    end if

    val = ((argv row 3) slice 1, (argv cell 3, 0))
    
    assert typeOf val !== "array"

    func `bst`(arr, val, beg = 0, end = count arr)
        if beg === end
            return -1
        end if
        
        len = floor((end - beg) / 2)
        
        if arr.(beg + len) === val
            return beg + len
        end if
        
        if arr.(beg + len) > val
            return `bst`(arr, val, beg, beg + len)
        end if
        
        `bst`(arr, val, beg + len + 1, end)
    end func
    
    return `bst`(arr, val)
end func

return main()
